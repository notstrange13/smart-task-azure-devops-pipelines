# Smart Task Example: Dynamic Security Scanning Based on Code Analysis
# This pipeline demonstrates AI analyzing code changes to determine appropriate security scans

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - src/*
      - package*.json
      - requirements.txt
      - Dockerfile*

variables:
  - name: MODEL_TYPE
    value: 'AZURE_OPENAI'
  - name: AZURE_OPENAI_INSTANCE_NAME
    value: 'your-openai-instance'
  - name: AZURE_OPENAI_KEY
    value: '$(AZURE_OPENAI_API_KEY)' # Store as secret variable
  - name: AZURE_OPENAI_DEPLOYMENT_NAME
    value: 'gpt-4o'
  - name: AZURE_OPENAI_API_VERSION
    value: '2024-02-15-preview'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: SecurityAnalysisDecision
    displayName: 'AI-Driven Security Analysis Strategy'
    jobs:
      - job: AnalyzeSecurityNeeds
        displayName: 'Analyze Code and Determine Security Scanning Strategy'
        steps:
          - checkout: self
            displayName: 'Checkout Source Code'

          - task: SmartTask@1
            displayName: 'AI Decision: Security Scanning Strategy'
            inputs:
              prompt: |
                Analyze this repository to determine the appropriate security scanning strategy:

                1. **Code Analysis:**
                   - Read package.json (if exists) to identify dependencies and project type
                   - Check for requirements.txt, Gemfile, or other dependency files
                   - Look for Dockerfile to understand containerization
                   - Examine the project structure to understand technology stack

                2. **Dependency Analysis:**
                   - Identify if this is a Node.js, Python, Java, .NET, or other project
                   - Check for known vulnerable dependency patterns
                   - Determine if container scanning is needed

                3. **Security Strategy Decisions:**
                   - SCAN_DEPENDENCIES: true/false (for dependency vulnerability scanning)
                   - SCAN_SECRETS: true/false (for secret detection in code)
                   - SCAN_CONTAINER: true/false (for Docker container scanning)
                   - SCAN_SAST: true/false (for static application security testing)
                   - SCAN_LICENSE: true/false (for license compliance checking)
                   - SECURITY_PRIORITY: 'low' | 'medium' | 'high' | 'critical'

                4. **Provide reasoning:**
                   - SCAN_REASON: Explanation of why specific scans were selected
                   - RISK_ASSESSMENT: Assessment of potential security risks

                Base decisions on actual project characteristics found through analysis.

              mode: 'decision'
              additionalContext: |
                {
                  "security_policies": {
                    "dependency_scanning": {
                      "required_for": ["production", "main_branch"],
                      "optional_for": ["development", "feature_branch"]
                    },
                    "secret_scanning": {
                      "always_required": true,
                      "exclude_patterns": [".git", "node_modules", "*.log"]
                    },
                    "container_scanning": {
                      "required_when": ["dockerfile_present", "container_registry_push"],
                      "tools": ["trivy", "docker_bench"]
                    },
                    "license_compliance": {
                      "check_for": ["commercial_use", "distribution"],
                      "allowed_licenses": ["MIT", "Apache-2.0", "BSD-3-Clause"]
                    }
                  },
                  "risk_thresholds": {
                    "high_severity_limit": 0,
                    "medium_severity_limit": 5,
                    "total_vulnerabilities_limit": 20
                  }
                }

          - task: PowerShell@2
            displayName: 'Display Security Strategy Decisions'
            inputs:
              script: |
                Write-Host "=== AI Security Scanning Strategy ==="
                Write-Host "Project Analysis Completed"
                Write-Host ""
                Write-Host "=== Recommended Security Scans ==="
                Write-Host "Dependency Scanning: $(SCAN_DEPENDENCIES)"
                Write-Host "Secret Detection: $(SCAN_SECRETS)"
                Write-Host "Container Scanning: $(SCAN_CONTAINER)"
                Write-Host "Static Analysis (SAST): $(SCAN_SAST)"
                Write-Host "License Compliance: $(SCAN_LICENSE)"
                Write-Host ""
                Write-Host "Security Priority: $(SECURITY_PRIORITY)"
                Write-Host "Risk Assessment: $(RISK_ASSESSMENT)"
                Write-Host "Reasoning: $(SCAN_REASON)"

  - stage: ExecuteSecurityScans
    displayName: 'Execute AI-Recommended Security Scans'
    dependsOn: SecurityAnalysisDecision
    condition: succeeded()
    jobs:
      - job: DependencyScanning
        displayName: 'Dependency Vulnerability Scanning'
        condition: eq(variables['SCAN_DEPENDENCIES'], 'true')
        steps:
          - checkout: self
          - task: NodeTool@0
            condition: contains(variables['SCAN_REASON'], 'Node.js')
            inputs:
              versionSpec: '18.x'
          - script: |
              echo "Executing dependency scan..."
              # npm audit --audit-level moderate
              # or safety check for Python
              # or bundler-audit for Ruby
            displayName: 'Run Dependency Vulnerability Scan'

      - job: SecretScanning
        displayName: 'Secret Detection'
        condition: eq(variables['SCAN_SECRETS'], 'true')
        steps:
          - checkout: self
          - script: |
              echo "Scanning for secrets and credentials..."
              # git-secrets --scan
              # or truffleHog
              # or gitleaks
            displayName: 'Scan for Exposed Secrets'

      - job: ContainerScanning
        displayName: 'Container Security Scanning'
        condition: eq(variables['SCAN_CONTAINER'], 'true')
        steps:
          - checkout: self
          - script: |
              echo "Building and scanning container..."
              # docker build -t temp-scan .
              # trivy image temp-scan
            displayName: 'Container Vulnerability Scan'

      - job: StaticAnalysis
        displayName: 'Static Application Security Testing (SAST)'
        condition: eq(variables['SCAN_SAST'], 'true')
        steps:
          - checkout: self
          - script: |
              echo "Running static security analysis..."
              # semgrep --config=auto
              # or sonarqube
              # or codeql
            displayName: 'Static Security Analysis'

      - job: LicenseCompliance
        displayName: 'License Compliance Check'
        condition: eq(variables['SCAN_LICENSE'], 'true')
        steps:
          - checkout: self
          - script: |
              echo "Checking license compliance..."
              # license-checker
              # or fossa
              # or whitesource
            displayName: 'License Compliance Verification'
